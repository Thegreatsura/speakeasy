package sdkgen

import (
	"bytes"
	"context"
	"fmt"
	"os"
	"path"
	"path/filepath"
	"strings"

	"github.com/speakeasy-api/openapi-generation/v2/pkg/filetracking"
	"github.com/speakeasy-api/openapi-generation/v2/pkg/generate"
	"github.com/speakeasy-api/speakeasy/internal/log"
	"github.com/speakeasy-api/speakeasy/internal/utils"
	"gopkg.in/yaml.v3"
)

func Generate(ctx context.Context, customerID, lang, schemaPath, outDir, baseURL, genVersion string, debug bool, autoYes bool) error {
	if !generate.CheckLanguageSupported(lang) {
		return fmt.Errorf("language not supported: %s", lang)
	}

	fmt.Printf("Generating SDK for %s...\n", lang)

	if strings.TrimSpace(outDir) == "." {
		wd, err := os.Getwd()
		if err != nil {
			return fmt.Errorf("failed to get current working directory: %w", err)
		}

		outDir = wd
	}

	conf, err := getConfig(outDir, baseURL)
	if err != nil {
		return fmt.Errorf("failed to load %s/gen.yaml: %w", outDir, err)
	}

	schema, err := os.ReadFile(schemaPath)
	if err != nil {
		return fmt.Errorf("failed to read schema file %s: %w", schemaPath, err)
	}

	if err := filetracking.CleanDir(outDir, autoYes); err != nil {
		return fmt.Errorf("failed to clean out dir %s: %w", outDir, err)
	}

	l := log.Logger()

	opts := []generate.GeneratorOptions{
		generate.WithLogger(l),
		generate.WithCustomerID(customerID),
		generate.WithFileFuncs(func() func(filename string, data []byte, checkExisting bool) error {
			return func(filename string, data []byte, checkExisting bool) error {
				return writeFile(outDir, filename, data, checkExisting)
			}
		}(), func() func(filename string) ([]byte, error) {
			return func(filename string) ([]byte, error) {
				filePath := path.Join(outDir, filename)

				if _, err := os.Stat(filePath); err != nil {
					return nil, err
				}

				return os.ReadFile(filePath)
			}
		}()),
		generate.WithRunLocation("cli"),
		generate.WithGenVersion(genVersion),
	}

	if debug {
		opts = append(opts, generate.WithDebuggingEnabled())
	}

	g, err := generate.New(opts...)
	if err != nil {
		return err
	}

	if errs := g.Generate(context.Background(), schema, lang, conf); len(errs) > 0 {
		for _, err := range errs {
			l.Error(err.Error())
		}

		return fmt.Errorf("Failed to generate SDKs for %s ✖", lang)
	}

	fmt.Printf("Generating SDK for %s... %s\n", lang, utils.Green("done ✓"))

	return nil
}

func getConfig(outDir string, baseURL string) (*generate.Config, error) {
	searchDir := filepath.Clean(outDir)

	// TODO: this may not work as expected on Windows
	for {
		if _, err := os.Stat(filepath.Join(searchDir, "gen.yaml")); err == nil {
			break
		}

		if searchDir == "/" || searchDir == "." || searchDir == "" {
			break
		}

		searchDir = filepath.Clean(filepath.Dir(searchDir))
	}

	data, err := os.ReadFile(filepath.Join(searchDir, "gen.yaml"))
	if err != nil {
		if !os.IsNotExist(err) {
			return nil, err
		}
		data = []byte{}
	}

	conf := &generate.Config{
		Python: generate.LanguageConfig{
			PackageName: "openapi",
			Version:     "0.0.1",
			Author:      "Speakeasy",
			Description: "Python Client SDK Generated by Speakeasy",
		},
		Go: generate.LanguageConfig{
			PackageName: "openapi",
		},
		Typescript: generate.LanguageConfig{
			PackageName: "openapi",
			Version:     "0.0.1",
			Author:      "Speakeasy",
		},
		Java: generate.LanguageConfig{
			PackageName: "openapi",
			Version:     "0.0.1",
			ProjectName: "openapi",
		},
		PHP: generate.LanguageConfig{
			PackageName: "openapi/openapi",
			Version:     "0.0.1",
			Namespace:   "OpenAPI\\OpenAPI",
		},
		BaseServerURL: baseURL,
	}
	if err := yaml.Unmarshal(data, &conf); err != nil {
		return nil, err
	}

	return conf, nil
}

func writeFile(outDir, filename string, data []byte, checkExisting bool) error {
	outFileName := path.Join(outDir, filename)

	dir := path.Dir(outFileName)

	if _, err := os.Stat(dir); os.IsNotExist(err) {
		err := os.MkdirAll(dir, os.ModePerm)
		if err != nil {
			return err
		}
	}

	// If file already exists check if the new content is the same as the existing content
	if checkExisting {
		if _, err := os.Stat(outFileName); !os.IsNotExist(err) {
			existing, err := os.ReadFile(outFileName)
			if err != nil {
				return err
			}

			if bytes.Equal(data, existing) {
				return nil
			} else {
				// TODO write this to a debug directory?
				return fmt.Errorf("found file with different contents on same run - %s", outFileName)
			}
		}
	}

	return os.WriteFile(outFileName, data, os.ModePerm)
}
